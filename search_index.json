[["index.html", "DevOps for Data Science (working title) Preface Software information and conventions Acknowledgments", " DevOps for Data Science (working title) Alex Gold 2021-05-30 Preface At some point, most data scientists reach the point where they want to show their work to others. But the skills and tools to deploy data science are completely different from the skills and tools needed to do data science. This book aims to help demystify the process of deploying data science, whether you’re building a DIY deployment system or trying to work with your organization’s IT/DevOps/SysAdmin/SRE group to make that happen. If you want to do serious data science, you’ve got to deploy. This book can help you figure out how to DIY it or how to work with your org’s IT/DevOps/SysAdmin/SRE group to make that happen. Software information and conventions I used the knitr package (Xie 2015) and the bookdown package (Xie 2021) to compile my book. My R session information is shown below: xfun::session_info() ## R version 4.1.0 (2021-05-18) ## Platform: x86_64-apple-darwin17.0 (64-bit) ## Running under: macOS Catalina 10.15.7 ## ## Locale: en_US.UTF-8 / en_US.UTF-8 / en_US.UTF-8 / C / en_US.UTF-8 / en_US.UTF-8 ## ## Package version: ## base64enc_0.1.3 bookdown_0.22 ## compiler_4.1.0 digest_0.6.27 ## evaluate_0.14 glue_1.4.2 ## graphics_4.1.0 grDevices_4.1.0 ## highr_0.9 htmltools_0.5.1.1 ## jsonlite_1.7.2 knitr_1.33 ## magrittr_2.0.1 markdown_1.1 ## methods_4.1.0 mime_0.10 ## rlang_0.4.11 rmarkdown_2.8 ## stats_4.1.0 stringi_1.6.2 ## stringr_1.4.0 tinytex_0.32 ## tools_4.1.0 utils_4.1.0 ## xfun_0.23 yaml_2.2.1 Package names are in bold text (e.g., rmarkdown), and inline code and filenames are formatted in a typewriter font (e.g., knitr::knit('foo.Rmd')). Function names are followed by parentheses (e.g., bookdown::render_book()). Acknowledgments A lot of people are helping me write this book. This book is published to the web using GitHub Actions from rOpenSci. References "],["about-the-author.html", "About the Author", " About the Author Alex Gold is a manager on the Solutions Engineering team at RStudio. He works with customers of RStudio’s professional software to help them deploy, configure, and use RStudio’s professional software and open source tooling in R and Python. In his free time, he enjoys landscaping, handstands, and Tai Chi. He occasionally blogs about data, management, and leadership at alexkgold.space. "],["introduction.html", "Chapter 1 Introduction 1.1 Components", " Chapter 1 Introduction If you want to do serious data science, you’ve got to deploy. This book can help you figure out how to DIY it or how to work with your org’s IT/DevOps/SysAdmin/SRE group to make that happen. What is the role of Data Science in orgs? Generation of insights or applications to provide insights based on data. Data Science vs BI vs Analytics – it’s all fuzzy Data Visualization and Machine Learning are a means, not an ends. Role in org varies widely – and therefore IT requirements are hard to predict. As data science becomes more central to org’s value generation, data science is increasingly being done in centralized platforms. What is the open data science platform: A centralized location to manage data science dev environment, as well as test and deploy content to end-users. Comparison to decentralized “work on your own machine” situations. 1.1 Components Workbench Package Management Change Control (git) Deployment Environment Front End vs Back End Data Ingest/Access Determining Requirements for your platform Platform requirements combination of Work being done on the platform Data Science needs (i.e. horsepower) Existing state of org’s data Type of work data scientists might do Batch Jobs ETL Reports Data Generation Real-Time Interactive Models APIs Apps Data Science + IT Needs Languages (R, Python, SQL) Sharing – internal, external Online or offline? Data Security – row based access? Centralized workbench vs individual workstations Existing Assets BI/Analytics Platforms Data Connections "],["servers-and-the-cloud.html", "Chapter 2 Servers and the Cloud 2.1 What is a Server? 2.2 What does networking mean? 2.3 How is a server different from my laptop? [maybe make a table?] 2.4 How can I get my very own server? 2.5 Exercises:", " Chapter 2 Servers and the Cloud 2.1 What is a Server? Computer that lives somewhere else Just the computer itself Usually don’t have access to it the way you do to local machine Usually login to access the command line on that machine using SSH Purpose is to serve things – to other machines via APIs or people via browser [Diagram: 3 ways of accessing servers] 2.2 What does networking mean? How you know where to access a server Lots of layers, but controls access to the servers doors Different from authentication, which determines who gets let into doors 2.3 How is a server different from my laptop? [maybe make a table?] OS How you access Server software (NGINX) 2.4 How can I get my very own server? Cloud free tiers Walk through creating account, logging in, getting EC2 set up Access using PEM key (point to SSH chapter) Set up NGINX 2.5 Exercises: Consider a simple data science app that allows an end user to view data. Can you draw a diagram of how that app could be deployed on remote servers? Where could the data live? How would users access the app? How would you access the app to do maintenance? Try standing up your own server in one of the major cloud providers and accessing it using the provided .pem key. "],["how-the-internet-works.html", "Chapter 3 How the Internet works 3.1 General Background on Networking", " Chapter 3 How the Internet works 3.1 General Background on Networking Computers communicate by sending packets from one to another Those packets get routed over a network Often frustratingly difficult Built on layers of protocols Physical Infrastructure -&gt; TCP/IP -&gt; HTTP/SSH -&gt; Start with single server on the web, gradually build up more complicated &lt;- 3.1.1 How do computers know where to find each other? [Diagram: Packet Routing] The internet uses a set of protocols collectively known as TCP/IP – they define how networked computers create and address packets, and then how those packets are sent, routed, and received. When a computer joins a network, it gets an Internet Protocol (IP) address V4 vs V6 IP addresses are split up into “blocks” – some reserved for particular uses Routing generally occurs via DNS – centralized servers that transform the usual human-friendly URLs we know into IP addresses. Public IP addresses are paid – you’ll get one with your EC2 instance 3.1.2 What happens once they find each other? [Diagram: HTTP Request] An “application layer” protocol kicks in. This is a protocol for sending actual content from one computer to another. For example, HTTP defines a client/server relationship where the client (your web browser) makes requests that the server fulfills. Other protocols: e.g. websockets Whether you are allowed to access a particular resource is about Authentication and Authorization "],["networking-for-your-data-science-servers.html", "Chapter 4 Networking for your data science servers 4.1 Network Topology 4.2 I’ve heard HTTPS is a thing 4.3 Exercises", " Chapter 4 Networking for your data science servers 4.1 Network Topology [Diagram: Common Network Topology] Most work occurs inside a VPC IP addresses inside a VPC can be assigned as you wish Subject to CIDR block rules Need translation between inside and outside -&gt; proxy If being used for SSH access, usually called bastion Proxies commonly used to serve as firewalls, network address translators, load-balancers Forward (outbound) proxy vs reverse (inbound) proxy Private vs public subnets Particular ports being “open” 4.2 I’ve heard HTTPS is a thing Secured HTTP End-to-end encryption using Transport Layer Security (TLS) or Secure Sockets Layer (SSL) HTTP over TLS/SSL Getting and configuring an SSL certificate 4.3 Exercises Consider going to the website google.com. Draw a diagram of how the following are incorporated: TCP/IP, DNS, HTTP, HTTPS. TODO: More exercise "],["cloud-services-and-cloud-providers.html", "Chapter 5 Cloud Services and Cloud Providers 5.1 What is the Cloud? 5.2 The Rise of Services 5.3 Common Services That will be helpful to know offhand 5.4 Cloud Tooling 5.5 Exercises", " Chapter 5 Cloud Services and Cloud Providers 5.1 What is the Cloud? General description for servers that you rent instead of buy 3 major cloud providers AWS = Amazon Azure = Microsoft GCP = Google 5.2 The Rise of Services Server/Cloud usage has gone the way of the rest of the economy – services The “rent me a server + connectors” model is generally called IaaS Layers of abstraction on top of that – PaaS, Saas Metaphor: Cake shop [Diagram: Cake Shop] These metaphors are helpful for general understanding…actually applying them gets really fuzzy in data science land, because something that is SaaS from IT perspective is PaaS from data scientist perspective. Often find it more helpful to just categorize as IaaS/“something more abstracted”. These services are generally surrounded my marketing jargon – rarely do they just explain this is ___ as a service. https://stackoverflow.com/questions/16820336/what-is-saas-paas-and-iaas-with-examples 5.3 Common Services That will be helpful to know offhand Amazon’s names aren’t completely obvious. They’re usually referred to by their 3-letter acronyms. Azure and Google’s offerings tend to be named more literally. 5.4 Cloud Tooling Identity MGMT - IAM, Azure AD Billing Mgmt 5.4.1 IaaS Compute - AWS EC2, Azure VMs, Google Compute Engine Storage file - EBS, Azure managed disk, Google Persistent Disk Network drives - EFS, Azure Files, Google Filestore block/blob - S3, Azure Blob Storage, Google Cloud Storage Networking: Private Clouds: VPC, Virtual Network, Google Virtual Private Cloud DNS - Route53, Azure DNS + Traffic Manager, Google Cloud DNS 5.4.2 Not IaaS Container Hosting - ECS, Azure Container Instances + Container Registry K8S cluster as a service - EKS, AKS, GKE Run a function as a service - Lambda, Azure Functions, Google Cloud Functions Database - RDS/Redshift, Azure Database, Google Cloud SQL SageMaker - ML platform as a service, Azure ML, Google Notebooks https://docs.microsoft.com/en-us/azure/architecture/aws-professional/services#networking https://cloud.google.com/free/docs/aws-azure-gcp-service-comparison 5.5 Exercises Example of a service – for each of the 3 providers, which services would you use if you wanted an IaaS solution, a PaaS solution? "],["ssh.html", "Chapter 6 Accessing Servers via SSH 6.1 What is SSH? 6.2 How does SSH work? 6.3 Basic SSH Use 6.4 Getting Comfortable in your own setup 6.5 Advanced SSH Tips + Tricks 6.6 Exercises", " Chapter 6 Accessing Servers via SSH 6.1 What is SSH? Stands for secure (socket) shell Way to remotely access a different (virtual) machine Workhorse of doing work on another server 6.2 How does SSH work? Via Public Key Encryption Public/Private Key Known Hosts [Diagram: SSH Keys] &gt; Sidebar on public key encryption By default, available on port 22 6.3 Basic SSH Use The terminal 3 step process generate public/private keys ssh-keygen place keys in appropriate place use ssh to do work Permissions on key 6.4 Getting Comfortable in your own setup Using ssh-config 6.5 Advanced SSH Tips + Tricks SSH Tunneling/Port Forwarding -vvvv, -i, -p [Diagram: Port Forwarding] 6.6 Exercises Draw your own diagram of the sequence of things that occur when you execute ssh user@server.company.com in the terminal. Stand up a new server on one of the major cloud providers. Try logging in using the provided key file. Create a new user on the server. Generate a new SSH key locally and copy the correct key onto the server (think for a moment about which key is the correct one – consult your diagram from step 1 if necessary). Set up an SSH alias so you can SSH into your server using just ssh testserver (hint: look at your SSH config). Create a local text file and SFTP it to the server. SSH in, edit the file, and SFTP it back. [Advanced] Stand up a nginx server on your remote instance. Don’t open the port to the world, but SSH port forward the server page to your local browser. "],["auth.html", "Chapter 7 Accessing Servers via Browser/HTTP 7.1 How auth works", " Chapter 7 Accessing Servers via Browser/HTTP 7.1 How auth works Check who you are - Authentication Check whether you should have access - Authorization Differences between auth types 1) How is the communication done? Transmit text vs token (type/encryption) 2) When is the identity checked? Once, every time 3) When is authorization checked? 4) How encrypted are things? Authentication vs Authorization Private Auth Providers Public auth providers Authentication Authorization PAM/SSSD Linux LDAP AD SSO SAML OAuth2.0 OIDC Kerberos In-Product/External Service Accounts Whole-Server Auth Resources: https://www.okta.com/identity-101/saml-vs-oauth/ https://www.okta.com/identity-101/whats-the-difference-between-oauth-openid-connect-and-saml/ https://phoenixnap.com/blog/kerberos-authentication "],["connecting-to-data.html", "Chapter 8 Connecting to Data", " Chapter 8 Connecting to Data Flat File CSV Pickle/Rds Data Lake/Data Warehouse Database SQL noSQL JDBC/ODBC Row-level security Distributed/Streaming – Spark + Kafka Bucket storage "],["devtestprod.html", "Chapter 9 Dev/Test/Prod", " Chapter 9 Dev/Test/Prod what needed for data scientists How used by IT/Admins "],["environment-and-package-management.html", "Chapter 10 Environment and Package Management", " Chapter 10 Environment and Package Management System Libraries Languages Packages Repository Infrastructure As Code Docker AMI Compute vs Storage Stateful Idempotent "],["scaling.html", "Chapter 11 Scaling", " Chapter 11 Scaling Horizontal/Vertical Load-Balancing High-Availability Load Balancer Active/Actice Active/Passive Fallover Disaster Recovery "],["docker.html", "Chapter 12 Docker", " Chapter 12 Docker Container Image Dockerfile Hypervisor Kubernetes "],["offline.html", "Chapter 13 Offline", " Chapter 13 Offline "],["things-to-add-additional-topics.html", "Chapter 14 Things To Add (Additional Topics)", " Chapter 14 Things To Add (Additional Topics) Deployment Processes CI/CD - GHA, Jenkins, Travis Determining Requirements for your platform Platform requirements combination of Work being done on the platform Data Science needs (i.e. horsepower) Existing state of org’s data Type of work data scientists might do Batch Jobs ETL Reports Data Generation Real-Time Interactive Models APIs Apps Data Science + IT Needs Languages (R, Python, SQL) Sharing – internal, external Online or offline? Data Security – row based access? Centralized workbench vs individual workstations Existing Assets BI/Analytics Platforms Data Connections Checklist of above "],["getting-started-with-terminal.html", "Chapter 15 Getting Started with Terminal", " Chapter 15 Getting Started with Terminal Terminal in Mac Iterm2 bash, zsh, fish windows WSL Powershell PuTTY – no longer needed, but still an option Do need to enable SSH client tmux vim/nano "],["useful-linux-commands.html", "Chapter 16 Useful Linux Commands", " Chapter 16 Useful Linux Commands Moving yourself and files around in linux Cd Ls Rm Cp Mv Seeing What’s up on your server Df (-h) Top Cat Less Tail (-f) Ps -aux lsof Checking out files Cat Less Tail -f Grep Checking on networking Ping Curl Netstat chmod "],["more-to-say.html", "A More to Say", " A More to Say Yeah! I have finished my book, but I have more to say about some topics. Let me explain them in this appendix. To know more about bookdown, see https://bookdown.org. "],["references.html", "References", " References "]]
