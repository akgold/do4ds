# Demystifying \index{Docker}Docker {#sec-docker}

\index{Docker}Docker is an open-source tool for building, sharing, and
running software. \index{Docker}Docker is currently the dominant way
software developers capture a development environment and is an
increasingly popular tool to take code to production.

\index{Docker}Docker has become so popular because it makes code
portable. In most cases, the only system prerequisite to run almost any
\index{Docker}Docker \index{container}container is \index{Docker}Docker
itself.[^1-6-docker-1] Everything else comes in the
\index{container}container.

[^1-6-docker-1]: This was truer before the introduction of M-series
    chips for Macs. Chip architecture differences fall below the level
    that a \index{container}container captures, and many popular
    containers wouldn't run on new Macs. These issues are getting better
    over time and will probably fully disappear relatively soon.

Unlike environment as code tools that are specific to one language, like
\index{renv}`{renv}` or \index{venv}`{venv}`, \index{Docker}Docker
captures the entire reproducibility stack down to the
\index{operating system}operating system. The appeal is evident if
you've ever struggled with someone else running code you've written.

\index{Docker}Docker has so many strengths that it's easy to believe it
will solve all reproducibility problems. It's worth keeping a little
perspective.

While \index{Docker}Docker usually ensures that the code inside will
**run**, it doesn't fully solve reproducibility or IT/Admin concerns.
Some highly regulated contexts consider a \index{container}container
insufficiently rigorous for reproducibility purposes.

Running a \index{container}container also makes it easy to stand things
up, but integrations to other services, like data sources and
authentication, still must be configured externally.

Lastly, running a \index{container}container adds one more service
between you and the code you're trying to run. Trying to get docker to
work without a good mental model of how the services interact can be
very frustrating.

::: callout-note
This chapter focuses solely on the local use of \index{Docker}Docker for
building and running containers. For more on running containers in a
production context, including using \index{Kubernetes}Kubernetes, see
[Chapter @sec-ent-scale].
:::

In this chapter, you'll learn about the basic terminology and concepts
for running other people's \index{Docker}Docker containers and creating
your own. In the lab at the end of the chapter, we'll practice hosting
an \index{API}API inside a \index{container}container.

## Container lifecycle

\index{Docker}Docker is primarily concerned with the creation, movement,
and running of *containers*. A \index{container}container is a software
entity that packages code and its dependencies down to the
\index{operating system}operating system. Containers are one way to have
completely different environments coexisting side-by-side on one
physical machine.

::: callout-note
Containers aren't the only way to run multiple
\index{virtual environment}virtual environments on one host. They're
just the most talked about right now.

And \index{Docker}Docker Containers aren't the only type of
\index{container}container. You may run across other kinds, like
Apptainer (formerly Singularity), often used in *high performance
computing* (HPC) contexts.
:::

A \index{Docker}Docker Image is an immutable snapshot of a
\index{container}container. When you want to run a
\index{container}container, you *pull* the image and run it as an
*instance* or \index{container}container that you'll interact with.

::: callout-note
Confusingly, the term \index{container}container is used both to refer
to a running instance ("Here's my running \index{container}container")
as well as which image ("I used the newest Ubuntu
\index{container}container").

I prefer the term instance for the running \index{container}container to
eliminate this confusion.
:::

Images are usually stored in *registries*, which are similar to Git
repositories. The most common registry for public containers is
\index{Docker}Docker Hub, which allows public and private hosting of
images in free and paid tiers. \index{Docker}Docker Hub includes
official images for \index{operating system}operating systems and
programming languages, as well as many community-contributed containers.
Some organizations run private registries, usually using *registry as a
service* offerings from cloud providers.[^1-6-docker-2]

[^1-6-docker-2]: The big three \index{container}container registries are
    AWS Elastic \index{container}Container Registry (ECR), Azure
    \index{container}Container Registry, and Google
    \index{container}Container Registry.

Images are built from *Dockerfiles* -- the code that defines the image.
Dockerfiles are usually stored in a \index{Git}Git repository. Building
and pushing images in a CI/CD pipeline is common so changes to the
Dockerfile are immediately reflected in the registry.

You can control \index{Docker}Docker Containers from the
\index{Docker}Docker Desktop app. If you're using \index{Docker}Docker
on a server, you'll mostly interact via the command line interface
(CLI). All \index{Docker}Docker CLI commands are formatted as
`docker <command>`.

The graphic below shows the different states for a
\index{container}container and the CLI commands to move from one to
another.

![](images/docker-lifecycle.png){.lightbox
fig-alt="A diagram. A dockerfile turns into a \\index{Docker}Docker Image with docker build. The image can push or pull to or from an image registry. The image can run as a \\index{container}container instance."}

::: callout-note
I've included `docker pull` on the graphic for completeness, but you'll
rarely run it. `docker run` auto-pulls the \index{container}container(s)
it needs.
:::

Instances run on an underlying machine called a *host*. A primary
feature -- also a liability -- of using containers is that they are
ephemeral. Unless configured otherwise, anything inside an instance when
it shuts down vanishes without a trace.

See [Appendix @sec-append-cheat] for a cheat sheet listing common
\index{Docker}Docker commands.

### Image Names

You must know which image you're referencing to build, push, pull, or
run it. Every image has a name that consists of an *id* and a *tag*.

::: callout-note
If you're using \index{Docker}Docker Hub, \index{container}container IDs
take the form `<user>/<container name>`, so I might
have the \index{container}container
`alexkgold/my-container`. This should look familiar to
\index{GitHub}GitHub users.

Other registries may enforce similar conventions for IDs, or they may
allow IDs in any format they want.
:::

Tags specify versions and variants of containers and come after the `id`
and `:`. For example, the official Python \index{Docker}Docker image has
tags for each version of Python like `python:3`, variants for different
operating systems, and a `slim` version that saves space by excluding
recommended packages.

Some tags, usually used for versions, are immutable. For example, the
`rocker/r-ver` \index{container}container is built on Ubuntu and has a
version of R built in. There's a `rocker/r-ver:4.3.1`, which is a
\index{container}container with R 4.3.1.

Other tags are relative to the point in time. If you don't see a tag on
a \index{container}container name, it's using the default `latest`.
Other common relative tags refer to the current development state of the
software inside, like `devel`, `release`, or `stable`.

## Running containers

The `docker run` command runs \index{container}container images as an
instance. You can run `docker run <image name>` to get a running
\index{container}container. However, most things you want to do with
your instance require several command line flags.

The `-name <name>` flag names an instance. If you don't provide a name,
each instance gets a random alphanumeric ID on start. Names are useful
because they persist across individual instances of a
\index{container}container, so they can be easily remembered or used in
code.

The `-rm` flag automatically removes the \index{container}container
after it's done. If you don't use the `-rm` flag, the
\index{container}container will stick around until you clean it up
manually with `docker rm`. The `-rm` flag can be useful when iterating
quickly -- especially because you can't re-use names until you remove
the \index{container}container.

The `-d` flag will run your \index{container}container in detached mode.
This is useful when you want your \index{container}container to run in
the background and not block your terminal session. It's useful when
running containers in production, but you probably don't want to use it
when trying things out and want to see logs streaming out as the
\index{container}container runs.

### Getting Information in and out

When a \index{container}container runs, it is isolated from the host.
This is a great feature. It means programs running inside the
\index{container}container can address the \index{container}container's
filesystem and networking without worrying about the host outside. But,
it also means that using resources on the host requires explicit
declarations as part of the `docker run` command.

To get data in or out of a \index{container}container, you must mount a
shared *volume* (directory) between the \index{container}container and
host with the `-v` flag. You specify a host directory and a
\index{container}container directory separated by `:`. Anything in the
volume will be available to both the host and the
\index{container}container at the file paths specified.

For example, maybe you've got a \index{container}container that runs a
job against data it expects in the `/data` directory. On your host
machine, this data lives at `/home/alex/data`. You could make this
happen with:

``` {.bash filename="Terminal"}
docker run -v /home/alex/data:/data
```

Here's a diagram of how this works.

![](images/docker-on-host.png){.lightbox
fig-alt="A diagram showing how the flag -v /home/data:/data mounts the /home/data directory of the host to /data in the container."
height="200"}

Similarly, if you have a service running in a \index{container}container
on a particular port, you'll need to map the \index{container}container
port to a host port with the `-p` flag.

### Other Runtime Commands

If you want to see your containers, `docker ps` lists them. This is
especially useful to get instance IDs if you didn't bother with names.

To stop a running \index{container}container, `docker stop` does so
nicely and `docker kill` terminates a \index{container}container
immediately.

You can view the logs from a \index{container}container with
`docker logs`.

Lastly, you can execute a command inside a running
\index{container}container with `docker exec`. This is most commonly
used to access the command line inside the \index{container}container as
if \index{SSH}SSH-ing to a server with
`docker exec -it <container> /bin/bash`.

While it's normal to \index{SSH}SSH into a server to poke around, it's
somewhat of an anti-pattern to `exec` in to fix problems. Generally, you
should prefer to review logs and adjust Dockerfiles and `run` commands.

## Building images from Dockerfiles

A Dockerfile is a set of instructions to build a \index{Docker}Docker
image. If you know how to accomplish something from the command line,
you shouldn't have too much trouble building a Dockerfile to do the
same.

One thing to consider when creating Dockerfiles is that the resulting
image is immutable, meaning that anything you build into the image is
forever frozen in time. You'll want to set up the versions of R and
Python and install system requirements in your Dockerfile. Depending on
the purpose of your \index{container}container, you may want to copy in
code, data, and/or R and Python packages, or you may want to mount those
in from a volume at runtime.

There are many Dockerfile commands. You can review them all in the
Dockerfile documentation, but here are the handful that are enough to
build most images:

-   `FROM` -- Specify the base image, usually the first line of the
    Dockerfile.

-   `RUN` -- Run any command as if you were sitting at the command line
    inside the \index{container}container.

-   `COPY` -- Copy a file from the host filesystem into the
    \index{container}container.

-   `CMD` -- Specify what command to run on the
    \index{container}container's shell when it runs, usually the last
    line of the Dockerfile.[^1-6-docker-3]

[^1-6-docker-3]: You may also see `ENTRYPOINT`, which sets the command
    `CMD` runs against. Usually the default `/bin/sh -c` to run `CMD` in
    the shell will be the right choice.

Every Dockerfile command defines a new *layer*. A great feature of
\index{Docker}Docker is that it only rebuilds the layers it needs to
when you make changes. For example, take the following Dockerfile:

``` {.dockerfile filename="Dockerfile"}
FROM ubuntu:latest
COPY my-data.csv /data/data.csv
RUN ["head", "/data/data.csv"] # <1>
```

1. This line runs the `head` command against the `/data/data.csv` file when the container runs. Suppose you wanted to change it to `tail`. 

Rebuilding
this \index{container}container would be nearly instantaneous because
the \index{container}container would only start rebuilding after the
`COPY` command.

Once you've created your Dockerfile, you build it into an image using
`docker build -t <image name> <build directory>`. If you don't provide a
tag, the default tag is `latest`.

You can then push the image to DockerHub or another registry using
`docker push <image name>`.

## Comprehension questions

1.  Draw a mental map of the relationship between the following:
    Dockerfile, \index{Docker}Docker Image, \index{Docker}Docker
    Registry, \index{Docker}Docker \index{container}Container.
2.  When would you want to use each of the following flags for
    `docker run`? When wouldn't you?
    -   `-p`, `--name`, `-d`, `--rm`, `-v`
3.  What are the most important Dockerfile commands?

## Lab: Putting an API in a container

It is common to host an \index{API}API by putting it into a
\index{container}container. In this lab, we will put the Penguin Model
Prediction \index{API}API from [Chapter @sec-proj-arch] into a
\index{container}container.

If you've never used \index{Docker}Docker before, start by installing
\index{Docker}Docker Desktop on your computer.

Feel free to write your own Dockerfile to put the \index{API}API in a
\index{container}container. The Dockerfile will need to copy the API code and 
a requirements file into the container, install the requirements, run the API when the container starts, and expose an appropriate port.

Since the model will be updated more frequently than the container, I'd recommend putting the model outside the API and loading it when the container starts. If you're using Vetiver, that will look something like:

```{python}
b = pins.board_folder('/data/model', allow_pickle_read=True)
v = VetiverModel.from_pin(b, 'penguin_model', 
                          version = '20230422T102952Z-cb1f9')
```

::: callout-tip
If you want to make it easy, the `{vetiver}`
package, which you'll remember auto-generated the \index{API}API for us,
can also auto-generate a Dockerfile. 

You can see a working Dockerfile in the
GitHub repo for this book
([akgold/do4ds](https://github.com/akgold/do4ds)) in the [`_labs/lab6`](https://github.com/akgold/do4ds/tree/main/_labs/lab6)
directory. 
:::

Now build the \index{container}container using
`docker build -t penguin-model .`.

You can run the \index{container}container using:

``` {.bash filename="Terminal"}
docker run --rm -d \
  -p 8080:8080 \
  --name penguin-model \
  -v /data/model:/data/model \    # <1>
  penguin-model
```

1.  This line is necessary because the model lives at `/data/model` on our **host** machine.
But the \index{API}API inside the \index{container}container is looking
for `/data/model` **inside the container**. We need to make sure that the directory exists and has the model in it.

### Lab Extensions

Right now, logs from the \index{API}API stay inside the
\index{container}container instance. But that means that the logs go
away when the \index{container}container does. That's bad if the
\index{container}container dies because something goes wrong.

How might you ensure the \index{container}container's logs get written
somewhere more permanent?
