# Cheatsheets {#sec-append-cheat}

## Environments as Code

### Checking library + repository status

+------------------------------------+---------------+---------------+
| Step                               | R Command     | Python        |
|                                    |               | Command       |
+====================================+===============+===============+
| Check whether library in sync with | `renv::status()`           | None          |
| lockfile.                          |  |               |
+------------------------------------+---------------+---------------+

### Creating and Using a Standalone Project Library

Make sure you're in a standalone project library.

+--------------------+--------------------+--------------------+
| Step               | R Command          | Python Command     |
+====================+====================+====================+
| Make sure you've   | `install.packages("renv")`    | Included w/ Python |
| got                |   | 3.5+               |
| `{renv}/{venv}`. |                    |                    |
+--------------------+--------------------+--------------------+
| Create a           | `renv::init()`     | `python -m venv <dir>`           |
| standalone         |                    |   |
| library.           |                    |                    |
|                    |                    | Convention:        |
|                    |                    | use`.venv` for `<dir>`             |
|                    |                    |    |
+--------------------+--------------------+--------------------+
| Activate project   | `renv::activate()` | `source <dir> /bin/activate`   |
| library.           |                    |   |
|                    | Happens            |                    |
|                    | automatically if   |                    |
|                    | using projects in RStudio.    |                    |
+--------------------+--------------------+--------------------+
| Install packages   | `install.packages("<pkg>")`   | `python -m pip install <pkg>`    |
| as normal.         |   |   |
+--------------------+--------------------+--------------------+
| Snapshot package   | `renv::snapshot()` | `pip freeze > requirements.txt`|
| state.             |                    |   |
+--------------------+--------------------+--------------------+
| Exit project       | Leave R project.   | `deactivate`       |
| environment.       |                    |                    |
+--------------------+--------------------+--------------------+

### Collaborating on someone else's project

Start by downloading the project into a directory on your machine.

+--------------------+--------------------+--------------------+
| Step               | R Command          | Python Command     |
+====================+====================+====================+
| Move into project  | `set wd ("<project-dir>")`          | `cd <project-dir>` |
| directory.         |   |                    |
|                    |                    |                    |
|                    | Or just open R     |                    |
|                    | project in         |                    |
|                    | RStudio.           |                    |
+--------------------+--------------------+--------------------+
| Create project     | `renv::init()`     | `python -m venv <dir>`            |
| environment.       |                    |   |
|                    |                    |                    |
|                    |                    | Recommend:         |
|                    |                    | use `.venv` for `<dir>`             |
|                    |                    |    |
+--------------------+--------------------+--------------------+
| Enter project      | Happens            | `source <dir> /bin/activate`      |
| environment.       | automatically or   |   |
|                    | `renv::activate()` |                    |
+--------------------+--------------------+--------------------+
| Restore packages.  | Happens            | `pip install -r requirements.txt`  |
|                    | automatically or   |   |
|                    | `renv::restore()`  |                    |
+--------------------+--------------------+--------------------+

## HTTP Code Cheatsheet {#cheat-http}

As you work more with HTTP traffic, you'll learn some of the common
codes. Here's a cheatsheet for some of the most frequent you'll see.

+--------------------+------------------------------------------------+
| Code               | Meaning                                        |
+====================+================================================+
| `200`              | Everyone's favorite, a successful response.    |
+--------------------+------------------------------------------------+
| `3xx`              | Your query was redirected somewhere else,      |
|                    | usually ok.                                    |
+--------------------+------------------------------------------------+
| `4xx`              | Errors with the request                        |
+--------------------+------------------------------------------------+
| `400`              | Bad request. This isn't a request the server   |
|                    | can understand.                                |
+--------------------+------------------------------------------------+
| `401` and `403`    | Unauthorized or forbidden. Required            |
|                    | authentication hasn't been provided.           |
+--------------------+------------------------------------------------+
| `404`              | Not found. There isn't any content to access   |
|                    | here.                                          |
+--------------------+------------------------------------------------+
| `5xx`              | Errors with the server once your request got   |
|                    | there.                                         |
+--------------------+------------------------------------------------+
| `500`              | Generic server-side error. Your request was    |
|                    | received, but there was an error processing    |
|                    | it.                                            |
+--------------------+------------------------------------------------+
| `504`              | Gateway timeout. This means that a proxy or    |
|                    | gateway between you and the server you're      |
|                    | trying to access timed out before it got a     |
|                    | response from the server.                      |
+--------------------+------------------------------------------------+

## Cheatsheet: Git {#cheat-git}

+-------------------------+--------------------------------------------+
| Command                 | What it Does                               |
+=========================+============================================+
| `git clone <remote>`    | Clone a remote repo -- make sure you're    |
|                         | using SSH URL.                             |
+-------------------------+--------------------------------------------+
| `git add <files/dir>`   | Add files/dir to staging area.             |
+-------------------------+--------------------------------------------+
| `git commit -m <message>`                      | Commit your staging area.                  |
|  |                                            |
+-------------------------+--------------------------------------------+
| `git push origin <branch>`                     | Push to a remote.                          |
|  |                                            |
+-------------------------+--------------------------------------------+
| `git pull origin <branch>`                     | Pull from a remote.                        |
|  |                                            |
+-------------------------+--------------------------------------------+
| `git checkout <branch name>`                    | Checkout a branch.                         |
|  |                                            |
+-------------------------+--------------------------------------------+
| `git checkout -b <branch name>`                | Create and checkout a branch.              |
|  |                                            |
+-------------------------+--------------------------------------------+
| `git branch -d <branch name>`                  | Delete a branch.                           |
|  |                                            |
+-------------------------+--------------------------------------------+

## Docker {#cheat-docker}

### Docker CLI Commands

+-------------+-------------+-------------+-------------------------+
| Stage       | Command     | What it     | Notes and helpful       |
|             |             | does        | options                 |
+=============+=============+=============+=========================+
| Build       | `docker build <directory>`    | Builds a    | `-t <name:tag>` provide |
|             |   | directory   | a name to the           |
|             |    | containing  | container. `tag` is     |
|             |             | a           | optional, defaults to   |
|             |             | Dockerfile  | `latest`.               |
|             |             | into an     |                         |
|             |             | image.      |                         |
+-------------+-------------+-------------+-------------------------+
| Move        | `docker push <image>`        | Push a      |                         |
|             |   | container   |                         |
|             |     | to a        |                         |
|             |             | registry.   |                         |
+-------------+-------------+-------------+-------------------------+
| Move        | `docker pull <image>`        | Pull a      | Rarely used because     |
|             |   | container   | `run` pulls the         |
|             |     | from a      | container if needed.    |
|             |             | registry.   |                         |
+-------------+-------------+-------------+-------------------------+
| Run         | `docker run <image>`         | Run a       | See flags in next       |
|             |   | container.  | table.                  |
|             |     |             |                         |
+-------------+-------------+-------------+-------------------------+
| Run         | `docker stop <container>`   | Stop a      | `docker kill` can be    |
|             |    | running     | used if `stop` fails.   |
|             |    | container.  |                         |
+-------------+-------------+-------------+-------------------------+
| Run         | `docker ps`          | List        | Useful to get running   |
|             |    | containers. | container id to do      |
|             |             |             | things to it.           |
+-------------+-------------+-------------+-------------------------+
| Run         | `docker exec <container> <command>`    | Run a       | Basically always used   |
|             |   | command     | to open a shell in a    |
|             |    | inside a    | container with          |
|             |    | running     | `docker exec -it <container> /bin/bash`       |
|             |             | container.  |   |
+-------------+-------------+-------------+-------------------------+
| Run         | `docker logs <container>`   | Views logs  |                         |
|             |    | for a       |                         |
|             |    | container.  |                         |
+-------------+-------------+-------------+-------------------------+

### Flags for `docker run`

+---------------+------------------+-------------------------------+
| Flag          | Effect           | Notes                         |
+===============+==================+===============================+
| `--name <name>`           | Give a name to   | Optional. Will be             |
|   | the running      | auto-assigned if not          |
|               | container.       | provided.                     |
+---------------+------------------+-------------------------------+
| `--rm`        | Remove container | Don't use in production. You  |
|               | when its         | probably want to inspect      |
|               | stopped.         | failed containers.            |
+---------------+------------------+-------------------------------+
| `-d`          | Detach container | Almost always used in         |
|               | (don't block the | production.                   |
|               | terminal).       |                               |
+---------------+------------------+-------------------------------+
| `-p <port>:<port>`        | Publish port     | Needed if you want to access  |
|   | from inside      | an app or API running inside  |
|               | container to     | the container.                |
|               | outside.         |                               |
+---------------+------------------+-------------------------------+
| `-v<dir>:<dir>`           | Mount volume     |                               |
|   | into the         |                               |
|               | container.       |                               |
+---------------+------------------+-------------------------------+

*Reminder: Order for `-p` and `-v` is `<host>:<container>`*

### Dockerfile Commands

These are the commands that go in a Dockerfile when you're building it.

+---------------+-----------------------------------+---------------+
| Command       | Purpose                           | Example       |
+===============+===================================+===============+
| `FROM`        | Indicate base container.          | `FROM rocker/r-ver:4.1.0`             |
|               |                                   |    |
|               |                                   |  |
+---------------+-----------------------------------+---------------+
| `RUN`         | Run a command when building.      | `RUN apt-get update`      |
|               |                                   |  |
+---------------+-----------------------------------+---------------+
| `COPY`        | Copy from build directory into    | `COPY . /app/`             |
|               | the container.                    |  |
+---------------+-----------------------------------+---------------+
| `CMD`         | Specify the command to run when   | `CMD quarto render .`     |
|               | the container starts.             |  |
+---------------+-----------------------------------+---------------+

## Cloud Services

+-------------+-------------------------+-------------+-------------+
| Service     | AWS                     | Azure       | GCP         |
+=============+=========================+=============+=============+
| Kubernetes  | EKS (Elastic Kubernetes | AKS (Azure  | GKE (Google |
| cluster     | Service) or Fargate     | Kubernetes  | Kubernetes  |
|             |                         | Service)    | Engine)     |
+-------------+-------------------------+-------------+-------------+
| Run a       | ECS (Elastic Container  | Azure       | Google App  |
| container   | Service) or Elastic     | Container   | Engine      |
| /a          | Beanstalk               | Apps        |             |
| pplication  |                         |             |             |
+-------------+-------------------------+-------------+-------------+
| Run an API  | Lambda                  | Azure       | Google      |
|             |                         | Functions   | Cloud       |
|             |                         |             | Functions   |
+-------------+-------------------------+-------------+-------------+
| Database    | RDS      |    Azure SQL         | Google Cloud Database            |
|             | |             |             |
|             |         |             |             |
|             |   |             |             |
+-------------+-------------------------+-------------+-------------+
| Data Warehouse  | Redshift                  | DataLake       | BigQuery      |
+-------------+-------------------------+-------------+-------------+
| ML Platform | SageMaker               | Azure ML    | Vertex AI   |
+-------------+-------------------------+-------------+-------------+
| NAS         | EFS (Elastic File       | Azure File  | Filestore   |
|             | System) or FSx          |             |             |
+-------------+-------------------------+-------------+-------------+

## Command Line {#cheat-cli}

### General Command Line

| Symbol          | What it is                        |
|-----------------|-----------------------------------|
| `man <command>` | Open manual for `command`         |
| `q`             | Quit the current screen           |
| `\`             | Continue bash command on new line |
| `ctrl + c`      | Quit current execution            |
| `echo <string>`      | Print string (useful for piping)            |

### Linux Navigation

+----------------+------------------------+------------------------+
| Command        | What it does/is        | Notes + Helpful        |
|                |                        | options                |
+================+========================+========================+
| `/`            | System root or file    |                        |
|                | path separator         |                        |
+----------------+------------------------+------------------------+
| `.`            | current working        |                        |
|                | directory              |                        |
+----------------+------------------------+------------------------+
| `..`           | Parent of working      |                        |
|                | directory              |                        |
+----------------+------------------------+------------------------+
| `~`            | Home directory of the  |                        |
|                | current user           |                        |
+----------------+------------------------+------------------------+
| `ls <dir>`     | List objects in a      | `-l` - format as list  |
|                | directory              |                        |
|                |                        | `-a` - all (include    |
|                |                        | hidden files that      |
|                |                        | start with `.`)        |
+----------------+------------------------+------------------------+
| `pwd`          | Print working          |                        |
|                | directory              |                        |
+----------------+------------------------+------------------------+
| `cd <dir>`     | Change directory       | Can use relative or    |
|                |                        | absolute paths         |
+----------------+------------------------+------------------------+

### Reading Text Files

+--------------------+--------------------+--------------------+
| Command            | What it does       | Notes + Helpful    |
|                    |                    | options            |
+====================+====================+====================+
| `cat <file>`       | Print a file from  |                    |
|                    | the top.           |                    |
+--------------------+--------------------+--------------------+
| `less <file>`      | Print a file, but  | Can be very        |
|                    | just a little.     | helpful to look at |
|                    |                    | a few rows of csv. |
|                    |                    |                    |
|                    |                    | Lazily reads       |
|                    |                    | lines, so can be   |
|                    |                    | *much* faster than |
|                    |                    | `cat` for big      |
|                    |                    | files.             |
+--------------------+--------------------+--------------------+
| `head <file>`      | Look at the        | Defaults to 10     |
|                    | beginning of a     | lines, can specify |
|                    | file.              | a different number |
|                    |                    | with `-n <n>`.     |
+--------------------+--------------------+--------------------+
| `tail <file>`      | Look at the end of | Useful for logs    |
|                    | a file.            | where the newest   |
|                    |                    | part is last.      |
|                    |                    |                    |
|                    |                    | The `-f` flag is   |
|                    |                    | useful to follow   |
|                    |                    | for a live view.   |
+--------------------+--------------------+--------------------+
| `grep <expression>`               | Search a file      | Writing regex can  |
|   | usig regex.       | be a pain. I       |
|                    |                    | suggest testing    |
|                    |                    | expressions on     |
|                    |                    | $regex101.com$.      |
|                    |                    |                    |
|                    |                    | Often useful in    |
|                    |                    | combination with   |
|                    |                    | the pipe.          |
+--------------------+--------------------+--------------------+
| `|`                | The pipe           |                    |
+--------------------+--------------------+--------------------+
| `wc <file>`                | Count words in a file         | Use `-l` to count lines, useful for `.csv` files.                    |
+--------------------+--------------------+--------------------+

### Manipulating Files

+-------------------+--------------------+--------------------+
| Command           | What it does/is    | Notes + Helpful    |
|                   |                    | Options            |
+===================+====================+====================+
| `rm <path>`       | Remove             | `-r` - recursively |
|                   |                    | remove everything  |
|                   |                    | below a file path  |
|                   |                    |                    |
|                   |                    | `-f` - force -     |
|                   |                    | don't ask for each |
|                   |                    | file               |
|                   |                    |                    |
|                   |                    | **Be very careful, |
|                   |                    | it's permanent**   |
+-------------------+--------------------+--------------------+
| `cp <from> <to>`                | Copy               |                    |
|     |                    |                    |
+-------------------+--------------------+--------------------+
| `mv <from> <to>`                | Move               |                    |
|     |                    |                    |
+-------------------+--------------------+--------------------+
| `*`               | Wildcard           |                    |
+-------------------+--------------------+--------------------+
| `mkdir`/`rmdir`   | Make/remove        | `-p` - create any  |
|                   | directory          | parts of path that |
|                   |                    | don't exist        |
+-------------------+--------------------+--------------------+

### Move things to/from server

+---------------+-----------------------+-----------------------+
| Command       | What it does          | Notes + Helpful       |
|               |                       | options               |
+===============+=======================+=======================+
| `tar`         | Create/extract        | Almost always used    |
|               | archive file          | with flags.           |
|               |                       |                       |
|               |                       | Create is usually     |
|               |                       |                       |
|               |                       | `tar -czf <archive name> <file(s)>`    |
|               |                       |  |
|               |                       |                       |
|               |                       | Extract is usually    |
|               |                       |                       |
|               |                       | `tar -xfv <archive name>`              |
|               |                       |   |
+---------------+-----------------------+-----------------------+
| `scp`         | Secure copy via `ssh` | Run on laptop to      |
|               |                       | server                |
|               |                       |                       |
|               |                       | Can use most `ssh`    |
|               |                       | flags (like `-i` and  |
|               |                       | `-v`)                 |
+---------------+-----------------------+-----------------------+

### Write files from the command line

+---------------+--------------------+-------------------------------+
| Command       | What it does       | Notes                         |
+===============+====================+===============================+
| `touch`       | Creates file if    | Updates last updated to       |
|               | doesn't already    | current time if it does       |
|               | exist.             | exist.                        |
+---------------+--------------------+-------------------------------+
| `>`           | Overwrite file     | Creates a new file if it      |
|               | contents           | doesn't exist                 |
+---------------+--------------------+-------------------------------+
| `>>`          | Concatenate to end | Creates a new file if it      |
|               | of file            | doesn't exist                 |
+---------------+--------------------+-------------------------------+

### Command Line Text Editors (Vim + Nano)

+---------------+--------------------------+-------------------------+
| Command       | What it does             | Notes + Helpful options |
+===============+==========================+=========================+
| `^`           | Prefix for file command  | Its the `⌘` or `Ctrl`   |
|               | in `nano` editor.        | key, not the caret      |
|               |                          | symbol.                 |
+---------------+--------------------------+-------------------------+
| `i`           | Enter insert mode (able  |                         |
|               | to type) in `vim`        |                         |
+---------------+--------------------------+-------------------------+
| `escape`      | Enter normal mode        |                         |
|               | (navigation) in `vim`.   |                         |
+---------------+--------------------------+-------------------------+
| `:w`          | Write the current file   | Can be combined to save |
|               | in `vim` (from normal    | and quit in one, `:wq`  |
|               | mode)                    |                         |
+---------------+--------------------------+-------------------------+
| `:q`          | Quit `vim` (from normal  | `:q!` quit without      |
|               | mode)                    | saving                  |
+---------------+--------------------------+-------------------------+

## Cheatsheet: Users and Permissions {#cheat-file}

### Users

+-------------------+-----------------------------------------------+
| Command           | What it does                                  |
+===================+===============================================+
| `su <username>`   | Change to be a different user.                |
+-------------------+-----------------------------------------------+
| `whoami`          | Get username of current user.                 |
+-------------------+-----------------------------------------------+
| `id`              | Get full user + group info on current user.   |
+-------------------+-----------------------------------------------+
| `passwd`          | Change password.                              |
+-------------------+-----------------------------------------------+
| `useradd`         | Add a new user.                               |
+-------------------+-----------------------------------------------+
| `usermod <username>`              | Modify user `username`. `-aG <group>` adds to |
|  | a group                                       |
+-------------------+-----------------------------------------------+

### Permissions

+---------------+---------------+----------------------------------+
| Command       | What it does  | Helpful options + notes          |
+===============+===============+==================================+
| `chmod <permissions> <file>`        | Modifies      | Number indicates permissions for |
|   | permissions   | user, group, others: add 4 for   |
|   | on a file.    | read, 2 for write, 1 for         |
|               |               | execute, 0 for nothing.          |
+---------------+---------------+----------------------------------+
| `chown <user/group> <file>`        | Change the    | Can be used for user or group,   |
|   | owner of a    | e.g. `:my-group`.                |
|   | file.         |                                  |
+---------------+---------------+----------------------------------+
| `su <username>`          | Change active |                                  |
|    | user to       |                                  |
|               | `username`.   |                                  |
+---------------+---------------+----------------------------------+
| `sudo <command>`          | Adopt super   |                                  |
|   | user          |                                  |
|               | permissions   |                                  |
|               | for the       |                                  |
|               | following     |                                  |
|               | command.      |                                  |
+---------------+---------------+----------------------------------+

## Cheatsheet: `ssh` {#cheat-ssh}

``` bash
ssh <user>@<host>
```

+---------------+---------------------+------------------------------+
| Flag          | What it does        | Notes                        |
+===============+=====================+==============================+
| `-v`          | Verbose, good for   | Add more `v`s as you please, |
|               | debugging.          | `-vv` or `-vvv`.             |
+---------------+---------------------+------------------------------+
| `-i`          | Choose identity     | Not necessary with default   |
|               | file (private key)  | key names.                   |
+---------------+---------------------+------------------------------+

## Cheatsheet: Linux Admin Commands {#cheat-admin}

### Install applications (Ubuntu)

+---------------------------------+----------------------------------+
| **Command**                     | **What it does**                 |
+---------------------------------+----------------------------------+
| `apt-get update && apt-get upgrade -y`                    | Fetch and install upgrades to    |
|   | system packages                  |
+---------------------------------+----------------------------------+
| `apt-get install <package>`   | Install a system package.        |
+---------------------------------+----------------------------------+
| `wget`                          | Download a file from a URL.      |
+---------------------------------+----------------------------------+
| `gdebi`                         | Install local `.deb` file.       |
+---------------------------------+----------------------------------+

### Storage

+---------------+-----------------------+-----------------------+
| Command       | What it does          | Helpful options       |
+===============+=======================+=======================+
| `df`          | Check storage space   | `-h` for human        |
|               | on device.            | readable file sizes.  |
+---------------+-----------------------+-----------------------+
| `du`          | Check size of files.  | Most likely to be     |
|               |                       | used as               |
|               |                       | `d u                  |
|               |                       |  - h <dir> | sort -h` |
|               |                       |                       |
|               |                       | Also useful to        |
|               |                       | combine with `head`.  |
+---------------+-----------------------+-----------------------+

### Processes

+---------------+------------------+---------------------------------+
| Command       | What it does     | Helpful options                 |
+===============+==================+=================================+
| `top`         | See what's       |                                 |
|               | running on the   |                                 |
|               | system.          |                                 |
+---------------+------------------+---------------------------------+
| `ps aux`      | See all system   | Consider using `--sort` and     |
|               | processes.       | pipe into `head` or `grep`      |
+---------------+------------------+---------------------------------+
| `kill`        | Kill a system    | `-9` to force kill immediately  |
|               | process.         |                                 |
+---------------+------------------+---------------------------------+

### Networking

+----------------+------------------+-------------------------------+
| Command        | What it does     | Helpful options               |
+================+==================+===============================+
| `netstat`      | See ports and    | Usually used with `-tlp`, for |
|                | services using   | tcp listening applications,   |
|                | them.            | including `pid`               |
+----------------+------------------+-------------------------------+
| `ssh -L <port>:<ip>:<port>:<host>`      | Port forwards a  | Choose local port to match    |
|    | remote port on   | remote port. Remote `ip` is   |
|  | host to local.   | usually `localhost`.          |
+----------------+------------------+-------------------------------+

### The path

+------------------------------+----------------------------------+
| Command                      | What it does                     |
+==============================+==================================+
| `which <command>`            | Finds the location of the binary |
|                              | that runs when you run           |
|                              | `command`.                       |
+------------------------------+----------------------------------+
| `ln -s <location to link>:<location ofsymlink>`                            | Creates a symlink from file at   |
|        | `location to link` to            |
|                        | `location of symlink`.           |
|                              |                                  |
|             |                                  |
|                   |                                  |
+------------------------------+----------------------------------+

### `systemd`
Daemonizing services is accomplished by configuring them in `/etc/systemd/system/<service name>.service`.

The format of all commands is `systemctl <command> <application>`.

| Command | Notes/Tips |
|----------------------|--------------|
| `status`                 |  Report status          |
| `start`                |         |
| `stop`           |          |
| `restart`       |  `stop` then `start`            |
| `reload`       |  Reload configuration that doesn't require restart (depends on service)            |
| `enable`         | Daemonize the service         |
| `disable`           |  Un-daemonize the service          |


## Cheatsheet: IP Addresses and Ports {#cheat-ports}

### Special IP Addresses

+---------------+--------------------------------------------------+
| Code          | Meaning                                          |
+===============+==================================================+
| $\text{127.0.0.1}$     | $\text{localhost}$ or loopback -- the machine that      |
|               | originated the request                           |
+---------------+--------------------------------------------------+
| $\text{192.168.x.x}$   | Protected address blocks used for private IP     |
|               | addresses.                                       |
| $\text{172.16.x.x.x}$  |                                                  |
|               |                                                  |
| $\text{10.x.x.x}$      |                                                  |
+---------------+--------------------------------------------------+

### Special Ports

All ports below $1024$ are reserved for server tasks and cannot be
assigned to admin-controlled services.

| Protocol/Application | Default Port |
|----------------------|--------------|
| HTTP                 | $80$           |
| HTTPS                | $443$          |
| SSH                  | $22$           |
| PostgreSQL           | $5432$         |
| RStudio Server       |  $8787$            |
| Shiny Server         |  $3939$          |
| JupyterHub           |  $8000$          |
