# The Terminal {#sec-terminal}

You're probably used to being able to click through a file tree or open
your preferences pane when you want to adjust some settings or navigate
to a file or directory on your computer.

But IT/Admins spend most of their time working with servers, which
generally have no *graphical user interfaces (GUIs)* at all. On a
server, interaction is via the command line -- an all-text interface
where you type commands.

Additionally, I've found that there are a variety of things that are
faster and easier on the terminal. Plus you get to feel like a hacker.

This chapter is all about the terminal itself -- by the end of the
chapter, you'll understand what the terminal is, how to get it open on
your machine, and how to customize it to your liking. In later chapters
we'll get into how to actually do things there.

## Getting the command line you want

The command line itself seems like a pretty simple thing. It's just a
blank line where you type the things you want your computer to do.

But pretty quickly after getting started on the command line, you'll
probably realize that some customization is in order. Maybe the colors
aren't quite right, or you want shortcut commands for things you do a
lot, or you want to add some information to the default display.

Pretty soon you'll find yourself neck deep in Stack Overflow posts on
how to customize your `.bashrc`, or wait, is it the `.zshrc`, or wait,
is it the terminal program settings pane.

In fact, some people might argue that spending so much time customizing
your terminal isn't the best use of your time.

Those people are no fun. Having a terminal that's super customized to
what you like is awesome and will make you feel super legit.

The command line you interact with is actually two or three programs
that sit on top of each other. Let's get into how to customize each. The
options you've got will depend on your operating system -- Windows or
Mac. I'm not addressing Linux here because if you're running Linux on
your desktop, you already have strong opinions on window managers,
terminals, shells, and more.

::: callout-note
I haven't used a Windows machine in many years. I've collected some
recommendations here, but I can't personally vouch for them the way I
can my Mac recommendations.
:::

## Your terminal

The terminal is the GUI where you'll type in commands. The terminal
program you use will dictate the colors and themes available for the
window, how tabs and panes work, and the keyboard shortcuts you'll use
to manage them.

::: panel-tabset
### MacOS

I'd recommend against using the built-in terminal app (called
`Terminal`). It's fine, but there are better options.

My personal favorite is the free [iTerm2](https://iterm2.com/), which
adds a bunch of niceties like better theming and multiple tabs.

### Windows

The built-in terminal is the favorite of many users. There are a variety
of alternatives you can try, but feel free to stick with the default.
:::

## Your shell

The shell is the program that takes the commands you're typing and runs
them. It's what matches the words you type to actual commands or
programs on your system. Depending on which shell you choose, you'll get
different options for auto-completion, plugins for things like git, and
theming of the text in your terminal.

::: panel-tabset
### MacOS

The default shell for MacOS (and Linux) is called *bash*. I'd advise you
to switch it out for *zsh*, which is the most popular *bash
alternative*.[^2-1-terminal-1]

You shouldn't worry that you're losing something by using a bash
alternative. All of the so-called bash alternatives are just bash with
some extra bells and whistles. If you ever find yourself back to using
default bash, you might be annoyed that some of your shortcuts don't
work, but you won't be lost.

Relative to bash, zsh has a few advantages out of the box, like better
auto-completion. It also has a huge ecosystem of themes to enhance
visual appeal and functionality, and plugins that let your command line
do everything from displaying your git status to controlling your
Spotify playlist.

I'd recommend looking up instructions for how to install zsh using
*Homebrew*, which you should also install if you haven't already.

### Windows

Windows comes with two shells built in, the *Command Shell* (`cmd`) and
the *PowerShell*.

The command shell is older and has been superseded by PowerShell. If
you're just getting started, you absolutely should just work with
PowerShell. If you've been using Command Shell on a Windows machine for
a long time, most Command Shell commands work in PowerShell, so it may
be worth switching over.
:::

[^2-1-terminal-1]: zsh is pronounced by just speaking the letters aloud,
    *zee-ess-aitch*. Some people might disagree and say it's *zeesh*,
    but they're not writing this book, are they?

## Make it look and work great

Now that you've got your shell and terminal installed, let's get it
customized just to your liking. It is possible to directly customize
both zsh and PowerShell, but in most cases, you'll want to use a
configuration manager to manage your themes and plugins.

::: panel-tabset
### MacOS

There are two popular plugin managers for zsh -- OhMyZsh and Prezto. You
should choose just one. I prefer Prezto, but the choice is really up to
you.

Once you've installed Prezto, you've got (at least) three different
places you could configure your command line -- iTerm2 preferences,
`.zshrc`, and `.zpreztorc`. I'd recommend leaving `.zshrc` alone,
customizing the look of the window and the tab behavior in the iTerm2
preferences, and customizing the text theme and plugins via prezto in
the `.zpreztorc` file.

I tend to be a pretty light on customizations, but I'd particularly
recommend looking into git plugins and some of the advanced
auto-completion and command history search functionality.

### Windows

Many people like customizing PowerShell with [*Oh My
Posh*](https://ohmyposh.dev/).
:::

## Comprehension Questions

1.  Draw a mental map that includes the following: terminal, shell,
    theme manager, operating system, my laptop
