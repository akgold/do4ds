# Computer Networks and the Internet {#url}

In [chapter 1](#servers), we got into how the computer on your desk, on your lap, or in your hand works. These days, many or even most of the things we want to do involve sending data across computer networks. When you visit a website, wirelessly print a document, or login to your email, you are making use of a computer network.

The computer network we're all most familiar with is the biggest of them all -- The Internet. But there are myriad other networks, like the very small private network of the devices (phones, computers, TVs, etc) connected to your home wifi router, to the somewhat larger VPN (it stands for virtual private network, after all) you might connect to for school or work.

A computer network is a set of computers that can communicate with each other to send data in the form of network traffic back and forth to each other. These networks are basically self-similar -- once you understand the wifi network in your house, you've also got a reasonably good understanding of how the entire internet works, which is great if you're an author trying to explain how this all works.

In this chapter, you'll learn the basics of how computer networks work. In particular, we'll get into some of the layers of protocols that define how computers communicate with each other. This chapter is mostly going to be background for the next few chapters, where we'll get into the nitty gritty of how to configure both the public and private elements of networking for your data science workshop.

## Computer communication = packets traversing networks

The virtual version of the processes that get your letter from your house to your penpal's is called *packet switching*, and it's really not a bad analogy. Like the physical mail, your computer dresses up a message with an address and some other details, sends it on its way, and waits for a response.[^2-4-understanding-traffic-1] The set of rules -- called a *protocol* -- that defines a valid address, envelope type, and more is called *TCP/IP*.

[^2-4-understanding-traffic-1]: One of the biggest ways the mail *is not* like packet switching is that your message gets chopped up among lots of different packets, which are routed independently, and are reassembled when they get where they're going. Works well for computers, not so well for real-world mail. It's also pretty much an irrelevant detail, since this whole process works quite invisibly.

Underneath these protocols is a bunch of hardware, which we're basically going to ignore.

Each computer network is governed by a router. For the purposes of your mental model, you can basically think of your router as doing two things -- maintaining a table of the IP addresses it knows, and following this algorithm over and over again.

#TODO: Turn into visual tree -- also visual of networks and sub-networks

1.  Do I know where this address is?

    1.  Yes: Send the packet there.

    2.  No: Send the packet to the default address and cross fingers.

In general, routers only know about the IP addresses of sub-networks and devices, so if you're printing something from your laptop to the computer in the next room, the packet just goes to your router and then straight to the printer.

> In your home's local area network (LAN), your router does one additional thing -- as devices like your phone, laptop, or printer attach to the network, it assigns them IP addresses based on the addresses available in a process called Dynamic Host Configuration Protocol (DHCP).

On the other hand, if you're sending something to a website or server that's far away, your computer has no idea where that IP address is. Clever people have solved this problem by setting the default address in each router to be an "upstream" router that is a level more general.

So immediately upstream of your router is probably a router specific to your ISP for a relatively small geographic area. Upstream of that is probably a router for a broader geographic area. So your packet will get passed upstream to a sufficiently general network and then back downstream to the actual IP address you're trying to reach.

#TODO: Image of computer network w/ upstream and downstream networks

When the packets are received and read -- something happens. Maybe you get to watch your show on Netflix, or your document gets printed -- or maybe you get an error message back. In any event, the return message will be transmitted exactly the same way as your initial message, though it might follow a different path.

## More details about IP Addresses

IP addresses are, indeed, addresses. They are how one computer or server finds another on a computer network, and they are unique within that network.

Most IP addresses you've probably seen before are IPv4 addresses. They're four blocks of 8-bit fields, so they look something like 65.77.154.233, where each of the four numbers is something between 0 and 255.

Since these addresses are unique, each server and website on the internet needs a unique IP address. If you do the math, you'll realize there are "only" about 4 billion of these. It turns out that's not enough for the public internet and we're running out.

In the last few years, adoption of the new standard, IPv6, has started. IPv6 addresses are eight blocks of hexadecimal (0-9 + a-f) digits separated by colons, with certain rules that allow them to be shortened, so 4b01:0db8:85a3:0000:0000:8a2e:0370:7334 or 3da4:66a::1 are both examples of valid IPv6 addresses.

IPv6 will coexist with IPv4 for a few decades, and we'll eventually switch entirely to IPv6. There's no worry about running out of IPv6 addresses any time soon, because the total number of IPv6 addresses is a number 39 digits long.

#### Special IP Addresses

As you work more with IP addresses, there are a few you'll see over and over. Here's a quick cheatsheet:

+----------------------------+------------------------------------------------------------------------------------------------------------+
| Code                       | Meaning                                                                                                    |
+============================+============================================================================================================+
| 127.0.0.1                  | `localhost` or loopback -- the machine that originated the request                                         |
+----------------------------+------------------------------------------------------------------------------------------------------------+
| 192.168.x.x, 172.16.x.x.x, | Protected address blocks used for private IP addresses. More on public vs private addresses in chapter XX. |
|                            |                                                                                                            |
| 10.x.x.x                   |                                                                                                            |
+----------------------------+------------------------------------------------------------------------------------------------------------+

## Ports {#ports}

**TODO**

Port forwarding outside:inside

Why you'd want to

## Application Layer Protocols define valid messages

If we think of the TCP/IP protocol defining valid addresses, package sizes and shapes, and how the mail gets routed, then *application layer protocols* are one layer down -- they define what are valid messages to put inside the envelope.

There are numerous application layer protocols. Some you will see in this book include `SSH` for direct server access, `(S)FTP` for file transfers, `SMTP` for email, `LDAP(S)` for authentication and authorization, and `websockets` for persistent bi-directional communication -- used for interactive webapps created by the Shiny package in R and the Streamlit package in Python.

We'll talk more about some of those other protocols later in the book. For now, let's focus on the one you'll spend most of your time thinking about -- `http`.

### `http` is the most common application layer protocol

Hyptertext transfer protocol (`http`) is the protocol that underlies a huge fraction of internet traffic. `http` defines how a computer can initiate a session with a server, request the server do something, and receive a response.

So whenever you go to a website, `http` is the protocol that defines how the underlying interactions that happen as your computer requests the website and the server sends back the various assets that make up the web page, which might include the HTML skeleton for the site, the CSS styling, interactive javascript elements, and more.

> It's worth noting that these days, virtually all `http` traffic over the internet is in the form of secured `https` traffic. We'll get into what the `s` means and how it's secured in the next chapter.

There are a few important elements to `http` requests and responses:

-   Request Method -- getting deep into HTTP request methods is beyond the scope of this book, but there are a variety of different methods you might use to interact with things on the internet. The most common are `GET` to get a webpage, `POST` or `PUT` to change something, and `DELETE` to delete something.

-   Status Code - each HTTP response includes a status code indicating the response category. Some special codes you'll quickly learn to recognize are below. The one you'll (hopefully) see the most is 200, which is a successful response.

-   Response and Request Headers -- headers are metadata included with the request and response. These include things like the type of the request, the type of machine you're coming from, cookie-setting requests and more. In some cases, these headers include authentication credentials and tokens, and other things you might want to inspect.

-   Body - this is the content of the request or response.

    -   It's worth noting that `GET` requests for fetching something generally don't include a body. Instead, any specifics on what is to be fetched are specified through *query parameters*, the part of the URL that shows up after the `?`. They're often something like, `?first_name=alex&last_name=gold`

### Understand `http` traffic by inspecting it

The best way to understand `http` traffic is to take a close look at some. Luckily, you've got an easy tool -- your web browser!

Open a new tab in your browser and open your developer tools. How this works will depend on your browser. In Chrome, you'll go to View \> Developer \> Developer Tools and then make sure the Network tab is open.

Now, navigate to a URL in your browser (say google.com).

As you do this, you'll see the traffic pane fill up. These are the requests and responses going back and forth between your computer and the server.

If you click on any of them, there are a few useful things you can learn.

![](images-traffic/network-monitor.png)

At the top, you can see the timing. This can be helpful in debugging things that take a long time to load. Sometimes it's helpful to see what stage in the process bogs down.

In the pane below, you can inspect the actual content that is going back and forth between your computer and the server you're accessing including the request methods, status codes, headers, and bodies.

#### Special HTTP Codes

As you work more with `http` traffic, you'll learn some of the common codes. Here's a cheatshet for some of the most frequent you'll see.

| Code            | Meaning                                                                                                                                                    |
|-----------------|------------------------------------------------------------------------------------------------------------------------------------------------------------|
| `200`           | Everyone's favorite, a successful response.                                                                                                                |
| `3xx`           | Your query was redirected somewhere else, usually ok.                                                                                                      |
| `4xx` and `5xx` | Errors with, respectively, the request itself and the server.                                                                                              |
|                 | Particular Error Codes                                                                                                                                     |
| `400`           | Bad request. This isn't a request the server can understand.                                                                                               |
| `401` and `403` | Unauthorized or forbidden. Often means required authentication hasn't been provided.                                                                       |
| `404`           | Not found. There isn't any content at the address you're trying to access.                                                                                 |
| `504`           | gateway timeout. This means that a proxy or gateway between you and the server you're trying to access timed out before it got a response from the server. |

## Getting a real URL

\`\`\`

1.An IP address just specifies the location while a URL specifies location, protocol, and specific resource\
2.URL requires a DNS [server](http://www.differencebetween.net/technology/software-technology/difference-between-application-server-and-web-server/ "APPLICATION VS WEB") while an IP address doesn't\
3.URLs are unlimited while IP addresses are limited\
4.IP addresses and URLs have a one to many relationship\
\
Read more: [Difference Between URL and IP Address \| Difference Between](http://www.differencebetween.net/technology/internet/difference-between-url-and-ip-address/#ixzz7GHcaYyk6) <http://www.differencebetween.net/technology/internet/difference-between-url-and-ip-address/#ixzz7GHcaYyk6>

\`\`\`

In the last chapter, we talked about how network traffic knows where to go and what to do when it gets there. That's all fine and dandy, but you noticed that we spoke almost entirely in terms of IP addresses. You probably almost never work with IP addresses. Instead, we're used to visiting websites at universal resource locators (URLs), like google.com. What gives?

A URL is a more complete description of how to get to a website and what do to with the traffic than just an IP address. In this chapter, we'll discuss what a URL is and how each of the components is determined.

A URL looks like this:

$$
\overbrace{\text{http://}}^\text{protocol}\overbrace{\text{example.com}}^\text{server location}\overbrace{\text{:80}}^\text{port}\overbrace{\text{/}}^\text{resource}
$$

Now, this probably isn't what you type into your address bar in your browser. That's because modern browsers do most of this for you by default. So if you type $google.com$ into your browser's address bar, your browser will automatically assume the correct defaults for the rest. Try going to `https://google.com:443/`. What do you get?

## Using ports to get to the right service

Let's say you want to run software on a server. One of the big differences between server software, and software on your laptop is that server software needs to be able to interact with the outside world to be useful.

For example, when you want to use Microsoft Word on your computer, you just click on the button and then it's ready to go. But say I want to use RStudio Server. I don't have a desktop where I click to open RStudio Server. Instead, I go to a particular URL and I expect that RStudio will be there, ready to listen.

## Special IP Addresses and Ports

All ports below 1024 reserved.

80 - HTTP default

443 - HTTPS default

22 - SSH default

Normally, you'll see a URL written something like this:

$$
example.com
$$

It doesn't seem like this little sni

$$
\overbrace{https://}^{\text{Protocol}}\overbrace{\underbrace{www}_{\text{Subdomain}}.\underbrace{example}_{\text{Primary Domain}}.\underbrace{com}_{\text{Top-Level Domain}}}^{\text{Domain}}/\overbrace{engineering}^{\text{Path}}
$$

Even worse, IP addresses generally aren't permanent -- they can change when individual servers are replaced, or if you were to change the server architecture (say by adding and load-balancing a second instance -- see chapter XX).

Anatomy of a URL

In order to have something human-friendly and permanent, we access internet resources at uniform resource locators (URLs), like google.com, rather than an IP address.

## Getting your own domain

In the last chapter, we spent most of the time talking about server locations in terms of IP addresses. And it's true -- the "real" address of any server is its IP address. But we generally don't access websites or other resources at IP addresses -- they're hard to remember, and they can also change over time.

Instead, we generally use domains for websites, and hostnames for individual servers. We'll get into hostnames later on -- for now we're going to focus on domains.

A domain is simply a convenient alias for an IP address. The **domain name system (DNS)** is the decentralized internet phonebook that translates back and forth between domains and IP addresses. The details of how DNS resolution works are quite intricate -- but the important thing to know is that there are layers of DNS servers that eventually return an IP address to your computer for where to find your website.

From the perspective of someone trying to set up their own website, there's only one DNS server that matters to you personally -- the DNS server for your *domain name registrar*.

Domain name registrars are the companies that actually own domains. You can buy or rent one from them in order to have a domain on the internet. So let's say you take the data science server you set up in lab 1 and decide that you want to host it at a real domain.

Your first stop would be a domain name registrar where you'd find an available domain you like and pull out your credit card.

Costs for domain names vary widely. Buying a meaningless domain in a less popular top-level domain, say `ladskfmlsdf.me` can cost as little as \$3 per year. On the other hand, buying a `.com` domain that's a real word or phrase can be a few thousand dollars -- and there are articles every few years about some major company accidentally allowing their domain name to lapse and ransoming it back for stupid amounts of money.

So, conceptually, it's easy to understand how a domain comes to stand in for an IP address, with DNS being the directory that ties the two together.

### Configuring DNS to connect IP addresses and Domains

The harder part is the nitty gritty of how you accomplish that mapping yourself, which we'll get into now.

Configuration of DNS is done by way of *records*, of which there are a menagerie of types you *can* configure. Luckily, most simple configurations only need *CNAME* and *A* records.

Here's an imaginary DNS record table for the domain `example.com`:

| Path/Host | Type  | Target         |
|-----------|-------|----------------|
| `@`       | A     | `143.122.8.32` |
| `www`     | CNAME | example.com    |
| `*`       | A     | `143.122.8.33` |

Let's go through how to read this table.

Since we're configuring `example.com`, the paths/hosts in this table are relative to `example.com`.

In the first row we're configuring an A record to go to the target IP address. *A records* (or their IPv6 cousin *AAAA records*) map a domain to an actual IP address. The path `@` is a special symbol meaning exact match. So by this configuration, any traffic to `example.com` will be passed straight through to the specified IP address.

The second row deals with traffic to the `www` subdomain. *CNAME records* alias sub-domains. They're most frequently used to map sub-domains to the main domain. Since this is a `CNAME` record for example.com, this record indicates that traffic to www.example.com should be treated exactly like traffic to `example.com`. Some domain providers do automatic redirection of `www` traffic, and so this row may not be necessary in some configurations.

The last record uses the wildcard symbol `*` to send all subdomain traffic that's not already spoken for -- say `blog.example.com` or `info.example.com` directly to the IP address specified. In this case, I'm sending all of those subdomains to a different IP address, maybe a 404 (not found) page -- or maybe I'm serving all the subdomains off a different server.

So what happens is that your query goes through several layers of public DNS servers to get to the DNS entry for your domain name registrar. In many cases, you'll directly configure your domain name registrar to point to your website or server -- but you also can configure the domain name registrar to point at another set of DNS servers you actually control with an *NS record*.

If you're setting up your own server, this probably isn't the case, but some large enterprises do run their own private DNS servers.

<aside>

You should always configure your domain provider as narrowly as possible -- and you should configure your website or server *first*.

#TODO: why?

</aside>

### Learning to Hate DNS

As you get deeper into using servers, you will learn to hate DNS with a fiery passion. While it's necessary so we're not running around trying to remember incomprehensible IP addresses, it's also very hard to debug as a server admin.

Let's say I've got the public domain `example.com`, and I'm taking down the server and putting up a new one. I've got to alter the public DNS record so that everyone going to `example.com` gets routed to the new IP address, and not the old one.

The thing that makes it particularly challenging is that the DNS system is decentralized. There are thousands of public DNS servers that a request could get routed to, and many of them may need updating.

Obviously, this is a difficult problem to solve, and it can take up to 24 hours for DNS changes to propagate across the network. So making changes to DNS records and checking if they've worked is kinda a guessing game of whether enough time has passed that you can conclude that your change didn't work right, or if you should just wait longer.

To add an additional layer of complexity, DNS lookups are slow, so your browser caches the results of DNS lookups it has done before. That means that it's possible you'll still get an old website even once the public DNS record has been updated. If a website has ever not worked for you and then worked when you tried a private browser, DNS caching is likely the culprit. Using a private browsing window sidesteps your main DNS cache and forces lookups to happen afresh.

### Trying it out

Go through hosting this book somewhere.

## Exercises

1.  Find a cheap domain you like and buy it.

2.  Put an EC2 server back up with the Nginx `hello-world` example.

3.  Configure your server to be available at your new domain.

    1.  Hint: In AWS, Route 53 is the service that handles incoming networking. They can serve as a domain name registrar, or you can buy a domain elsewhere and just configure the DNS using Route 53.

## Securing Traffic with `https`

When you go to a website on the internet, you'll see the URL prefixed by the `https` (though it's sometimes hidden by your browser because it's assumed). `https` is actually a mashup that is short for `http` with secure sockets layer (SSL).

These days, almost everyone actually uses the successor to SSL, transport layer security (TLS). However, because the experience of configuring TLS is identical to SSL, admins usually just talk about configuring SSL even when they mean TLS.

These days, almost every bit of internet traffic is actually `https` traffic. You will occasionally see `http` traffic inside private networks where encryption might not be as important -- but more and more organizations are requiring end-to-end use of SSL.

Securing your website or server using SSL/TLS is one of the most basic things you can do to make sure your website traffic is safe. You should always configure `https` -- full stop.

SSL/TLS security is accomplished by configuring your site or server to use a SSL certificate (often abbreviated to cert). We'll go through the details of how to get and configure an SSL certificate in this chapter -- but first a little background on how SSL/TLS works.

### How SSL/TLS Enhances Security

SSL accomplishes two things for you -- identity validation and traffic encryption.

When you go to a website, SSL/TLS is the technology that verifies that you're actually reaching the website you think you're reaching. This prevents something called a man-in-the-middle attack where a malicious actor manages to get in between the server and the client of network traffic. So, for example, you might think you're putting your bank login information into your normal bank website, but there's a hacker sitting in the middle, reading all of the traffic back and forth.

\[TODO: Image of man-in-the-middle\]

You can see this in action in your web browser. When you go to a website protected by `https`, you'll see a little lock icon to the left of the URL. That means that this website's SSL certificate matches the website and therefore your computer can verify you're actually at the website you mean to be at.

But how does your computer know what a valid SSL certificate is? Your computer has a list of trusted Certificate Authorities (CAs) who create, sell, and validate SSL/TLS certificates. So when you navigate to a website, the website sends back a digital signature. Your computer checks the signature against the indicated CA to verify that it was issued to the site in question.

\[TODO: image of SSL validation\]

The second type of scary scenario SSL prevents is a snooping/sniffing attack. Even if you're getting to the right place, your traffic travels through many different channels along the way -- routers, network switches, and more. This means that someone could theoretically look at all your traffic along the way to its meaningful destination.

When your computer gets back the digital signature to verify the site's identity, it also prompts an exchange of encryption keys. These keys are used to encrypt traffic back and forth between you and the server so anyone snooping on your message will just see garbled nonsense and not your actual content. You can think of the SSL/TLS encryption as the equivalent of writing a message on a note inside an envelope, rather than on a postcard anyone could read along the way.

### Getting a cert of your own

In order to configure your site or server with SSL, there are three steps you'll want to take: getting an SSL certificate, putting the certificate on the server, and making sure the server *only* accepts `https` traffic.

You can either buy an SSL certificate or make one yourself, using what's called a *self-signed cert*.

There are a variety of places you can buy an SSL/TLS certificate, in many cases, your domain name registrar can issue you one when you buy your domain.

When you create or buy your cert, you'll have to choose the scope. A basic SSL certificate covers just the domain itself, formally known as a fully qualified domain name (FQDN). So if you get a basic SSL certificate for `www.example.com`, `www.blog.example.com` will not be covered. You can get a *wildcard certificate* that would cover every subdomain of `*.example.com`.

<aside>

Note that basic SSL/TLS certification only validates that when you type `example.com` in your browser, that you've gotten the real `example.com`. It doesn't in any way validate who owns `example.com`, whether they're reputable, or whether you should trust them.

There are higher levels of SSL certification that do validate that, for example, the company that owns `google.com` is actually the company Google.

</aside>

But sometimes it's not feasible to buy certificates. While a basic SSL certificate for a single domain can cost \$10 per year or less, wildcard certificates will all the bells and whistles can cost thousands per year. This can get particularly expensive if you've got a lot of domains for some reason.

Moreover, there are times when you *can't* buy a certificate. If you're encrypting traffic inside a private network, you will need certificates for hosts or IP addresses that are only valid inside the private network, so there's no public CA to validate them.

There are two potential avenues to follow. In some cases, like inside a private network, you want SSL/TLS for the encryption, but don't really care about the identity validation part. In this case, it's usually possible to skip that identity validation part and automatically trust the certificate for encryption purposes.

It's also possible to create your own private CA, which would verify all your SSL certificates. This is pretty common in large organizations. At some point, every server and laptop needs to have the private CA added to its set of trusted certificate validators.

A warning: it is deceptively easy to generate and configure a self-signed SSL certificate. It's usually just a few lines of shell commands to create a certificate, and adding the certificate to your server or website is usually just a copy/paste affair.

However, it's pretty common to run into problems with self-signed certs or private CAs. Making sure the certificate chain is correct, or running into a piece of software that doesn't ignore the identity validation piece right is pretty common. This shouldn't dissuade you from using SSL/TLS. It's an essential, and basic, component of any security plan -- but using a self-signed cert probably isn't as easy as it seems.

When you configure your site or server, there will likely be an option to redirect all `http` traffic to `https` traffic. If your server or site is open to the internet, you should set this option.
