# Opening the Command Line {#sec-cmd-line}

When you want to open a file on your computer or adjust settings, you
just click through a file tree or open your preferences pane.

IT/Admins spend most of their time working with servers, which generally
have no *graphical user interfaces (GUIs)* at all. On a server,
interaction is via the command line -- an all-text interface where you
type commands.

Even if you're just a data scientist, it's worth learning your way
around the command line as there are a variety of tasks that are quicker
and easier that way. Plus you get to feel like a hacker.

The command line itself seems like a pretty simple thing. It's just a
blank line where you can tell your computer what to do.

Pretty soon after getting started on the command line, you'll realize
that some customization is in order. Maybe the colors aren't quite
right, or you want shortcuts for commands you type a lot, or you want
more information in the default display.

You'll soon find yourself neck deep in Stack Overflow posts on how to
customize your `.bashrc`. Or wait, is it the `.zshrc`? Or...

Some people might argue that expending so much energy customizing your
command line isn't the best use of your time.

Those people are no fun. Having a command line that's super customized
to what you like is awesome and will make you feel super legit.

This chapter is all about the command line itself -- by the end of the
chapter, you'll understand what it is, how to get it open on your
machine, and how to customize it to your liking.

In later chapters we'll get into how to actually do things there.

## Getting the command line you want

The reason customizing your command line is somewhat confusing is that
the command line you interact with is actually two or three programs
that sit on top of each other. You can mix-and-match options for each of
them and configure them in a variety of ways.

::: callout-note
### Notes on operating systems

I've been using the command line in MacOS for many years, so I have
strong opinions to share in this chapter.

I haven't used a Windows machine in many years. I've collected some
recommendations here, but I can't personally vouch for them the same
way.

I don't include recommendations for Linux because Linux desktop users
already have strong opinions on these topics and are probably already
composing screeds that my opinions are wrong.
:::

## The terminal

The terminal is the GUI where you'll type in commands. The terminal
program you use will dictate the colors and themes available for the
window, how tabs and panes work, and the keyboard shortcuts you'll use
to manage them.

Some programs you might use, like RStudio or VSCode have terminals built
into them. If you do basically all your terminal work from one of these
environments, you may not need another. But it can often be nice to have
a standalone terminal program you like.

::: panel-tabset
### MacOS

I'd recommend against using the built-in terminal app (called
*Terminal*). It's fine, but there are better options.

My personal favorite is the free [*iTerm2*](https://iterm2.com/), which
adds a bunch of niceties like better theming and multiple tabs.

### Windows

The built-in terminal is the favorite of many users. There are a variety
of alternatives you can try, but feel free to stick with the default.
:::

## The shell

The shell is the program that takes the commands you're typing and runs
them. It's what matches the words you type to actual commands or
programs on your system. Depending on which shell you choose, you'll get
different options for plugins and themes.

The shell runs anywhere you've got a running operating system. So your
computer has one shell, your server would have a different one. Even a
Docker Container has a shell available. That means that if you do a lot
of work on a server, you may need to configure your shell twice -- once
locally and once on the server.

::: panel-tabset
### MacOS

The default shell for MacOS (and Linux) is called *bash*. I'd advise you
to switch it out for *zsh*, which is the most popular *bash
alternative*.[^2-1-cmd-line-1]

Relative to bash, zsh has a few advantages out of the box, like better
auto-completion. It also has a huge ecosystem of themes to enhance
visual appeal and functionality, and plugins that let your command line
do everything from displaying your git status to controlling your
Spotify playlist.

All so-called bash alternatives are just bash with some extra bells and
whistles, so they're very similar. So if you log into a server that's
running bash rather than zsh, you might be annoyed that some of your
shortcuts don't work, but you won't be lost.

I'd recommend looking up instructions for how to install zsh using
*Homebrew*, which you should also install if you haven't already.

### Windows

Windows comes with two shells built in, the *Command Shell* (`cmd`) and
the *PowerShell*.

The Command Shell is older and has been superseded by PowerShell. If
you're just getting started, you absolutely should just work with
PowerShell. If you've been using Command Shell on a Windows machine for
a long time, most Command Shell commands work in PowerShell, so it may
be worth switching over.
:::

[^2-1-cmd-line-1]: zsh is pronounced by just speaking the letters aloud,
    *zee-ess-aitch*. Some people might disagree and say it's *zeesh*,
    but they're not writing this book, are they?

## Make it look and work great

Now that you've got your shell and terminal installed, let's get it
customized just for you. It is possible to directly customize both zsh
and PowerShell. In most cases, you'll want to use a configuration
manager to manage your themes and plugins.

::: panel-tabset
### MacOS

*Prezto* is my favorite configuration and plugin manager for zsh.
*OhMyZsh* is popular and also very good. Feel free to choose either --
but you can only use one.

Once you've installed Prezto, you've got (at least) three different
places you could configure your command line -- iTerm2 preferences,
`.zshrc`, and `.zpreztorc`. I'd recommend leaving `.zshrc` alone,
customizing the look of the window and the tab behavior in the iTerm2
preferences, and customizing the text theme and plugins via prezto in
the `.zpreztorc` file.

I tend to be a pretty light on customizations, but I'd recommend looking
into git plugins and some of the advanced auto-completion and command
history search functionality.

### Windows

Many people like customizing PowerShell with [*Oh My
Posh*](https://ohmyposh.dev/).
:::

## Comprehension Questions

1.  Draw a mental map that includes the following: terminal, shell,
    theme manager, operating system, my laptop
