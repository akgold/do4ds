# IT/Admin for Data Science {#sec-2-intro}

Welcome to the section of the book where you'll learn about the basics
of doing IT/Admin tasks yourself -- the section I wish I hadn't written.

Taking data science work to production involves getting that work hosted
somewhere. As a data scientist, you want to share a development
environment with other data professionals or publish a data science
project to non-technical stakeholders. That sharing requires that your
work live on a centralized server somewhere, and someone has to
administer that server.

In my experience, data scientists are at their best when a professional
IT/Admin takes responsibility for those administration tasks. But that
partnership often isn't achievable.

Some data professionals work at small organizations that lack dedicated
IT/Admins. Others are students or hobbyists trying to DIY something
cheaply. And others work at organizations with IT/Admin teams, but that
team lacks the time, interest, or expertise necessary to be helpful.

Sometimes, a data scientist has to be their own IT/Admin to avoid being
competely blocked from taking their work to production, which is the
worst outcome. Many -- if not most -- data scientists find themselves
responsible for administering the servers where their work runs at some
point in their career.

That's a scary place to be. Administering a server as a novice admin is
a little like jumping from a Honda Civic to wrangling a tractor-trailer.
You're going from managing personal devices for your own use to managing
a work machine that people make a whole career out of.

Even with the many online resources, the amount to learn can be
completely overwhelming. And being a bad IT/Admin can mean security
vulnerabilities, system instability, and general annoyance.

So in this section, you're going to learn the basics of being your own
IT/Admin. You'll be introduced to the topics in IT/Administration that
are relevant for a data science project. By the end, you'll be pretty
comfortable administering a simple data science workbench or server to
host a data science project.

If you don't have to be your own IT/Admin, that's even better. Reading
this section will give you an appreciation for what an IT/Admin does and
help you be a better partner to them.

## Getting and running a server

The most common way to get a server for data science is to rent one from
a cloud provider. In order to do data science tasks, many people combine
their server with other services from the cloud provider. That's why
[Chapter @sec-cloud] is an introduction to what the cloud is and how you
might want to use it for data science purposes.

Unlike your phone or personal computer, you'll never touch this cloud
server you've rented. Instead, you'll administer the server via a
virtual interface from your computer. Moreover, servers generally don't
even have the kind of point-and-click interface you're used to on your
personal devices.

Instead, you'll access and manage your server from the text-only command
line.That's why [Chapter @sec-cmd-line] is all about how to set up the
command line on your local machine to make it convenient and ergonomic
and how to connect to your server for administration purposes using a
technology called SSH.

Unlike your Apple, Windows, or Android operating systems you're used to
on your personal devices, most servers run the Linux operating system.
[Chapter @sec-linux] will teach you a little about what Linux is and
will introduce you to the basics of Linux administration including how
to think about files and users on a multi-tenant server.

But you're not interested in just running a Linux server. You want to
use it to accomplish data science tasks. In particular, you'll want to
install data science tools like R, Python, RStudio, JupyterHub, and
more. So you'll need to learn how to install, run, and configure
applications on your server. That's why [Chapter @sec-app-admin] is
about application administration.

When your phone or computer gets slow or you run out of storage, it's
probably time for a new one. But a server is a working machine that can
be scaled up or down to accommodate more people or heavier workloads
over time. That means that you may have to manage the server's resources
much more actively than your personal devices. That's why [Chapter
@sec-scale] is all about managing and scaling server resources.

## Making it (safely) accessible

Unless you're doing something really silly, your personal devices aren't
accessible to anyone who isn't physically touching the device. In
contrast, most servers are only useful **because** they're addressable
on a computer network, perhaps even the open internet.

Making a server accessible to people over the internet makes it useful,
but it also introduces risk. Many dastardly plans for your personal
devices are thwarted because a villain would have to physically steal it
to get access. For a server, allowing digital access means there are
many more potential threats looking to steal data or hijack your
computational resources for nefarious ends. You've got to be careful
about how you're providing access to the machine.

Moreover, risk aside, computer networking is a complicated topic, and
making it work right can be somewhat difficult. Following random
tutorials on the internet is a great way to eventually get your server
working, but have no idea what happened or why it suddenly works.

The good news is that it's not magic. [Chapter @sec-networking] is
all about how computers find each other across a network. Once you
understand the basic structure and operations of a computer network,
making only the things you intend to be public on your server will be
much easier.

Aside from a basic introduction to computer networking, there are two
other things you'll want to configure to make your server safe and
accessible. The first is to host your server at a human-friendly URL,
which you'll learn how to configure in [Chapter @sec-dns]. The second is
to add SSL/TLS to your server to secure the traffic going to and from
your server. You'll learn how to do that in [Chapter @sec-ssl].

Once you've finished these chapters, you'll have a basic understanding
of all the main topics in IT/Admin that are likely to come up as you try
to administer a simple data science workbench or project hosting
platform.

## Labs in this Section

In the first section of the book, the labs involved creating a
DevOps-friendly data science project. In this section, the labs will
revolve around actually putting that project into production.

You'll start by standing up an AWS EC2 instance, configuring your local
command line, and connecting to the server via SSH. Once you've done
that, you'll learn how to create users on the server and access the
server as a particular user.

At that point, you'll be ready to transition into data science work.
You'll add R, Python, RStudio Server, and JupyterHub to your server and
get them configured for work. Additionally, you'll deploy the Shiny App
and API you created in the book's first section onto the server.

Once the server itself is configured, you'll need to configure the
server's networking to make it accessible and secure. You'll learn how
to open the proper ports and configure a proxy to access multiple
services on the same server, and you'll learn to configure DNS records
so your server is available at a real URL and SSL so it can all be done
securely.

By the time you've finished the labs in this section, you'll be able to
use your EC2 instance as a data science workbench and add your penguin
mass prediction Shiny App to the Quarto website you created in the
book's first section.

For more details on what you'll do in each chapter, see [Appendix
@sec-append-lab].
